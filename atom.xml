<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Koruk’s road of mobile development]]></title>
  <link href="http://koruk.github.io/atom.xml" rel="self"/>
  <link href="http://koruk.github.io/"/>
  <updated>2013-11-24T03:56:53+08:00</updated>
  <id>http://koruk.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Octopress Blog Post]]></title>
    <link href="http://koruk.github.io/blog/2013/11/24/my-first-octopress-blog-post/"/>
    <updated>2013-11-24T02:16:11+08:00</updated>
    <id>http://koruk.github.io/blog/2013/11/24/my-first-octopress-blog-post</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android新增的导航模式-Navigation Drawer]]></title>
    <link href="http://koruk.github.io/blog/2013/05/18/navigation-drawer-1/"/>
    <updated>2013-05-18T12:00:11+08:00</updated>
    <id>http://koruk.github.io/blog/2013/05/18/navigation-drawer-1</id>
    <content type="html"><![CDATA[<h2>Navigation Drawer  &ndash; 第一部分</h2>

<p>这篇文章是我在Google I/O 2013大会期间写的。会上<code>Google</code>发布了很多新的东西，其中之一就是第13次修订的<code>v4 support library</code>（v4表示最低支持<code>Api Level</code> 4，同理v13表示最低支持<code>Api Level</code>13）。这个版本的v4包对<code>Navigation Drawer</code>界面设计模式提供了官方支持。这种这种设计模式在过去的时间里迅速发展，被许多应用采纳。但在此之前都没有官方支持以及相应的规范。但此刻这种情况不存在了，官方推出了<a href="http://developer.android.com/design/patterns/navigation-drawer.html">官方设计指南</a>。</p>

<p>在最近的关于Android的<a href="http://blog.stylingandroid.com/archives/1679"><code>Adapter</code></a><code>系列文章中，我们用Spinner导航的方式创建了一个应用，今天这篇文章中，我们会将那个Spinner导航来用</code>Navigation Drawer`来实现。</p>

<p>首先我们需要做的是获取最新的v4兼容包（13次修订版），本文中的项目是<code>maven</code>项目，所以如果你不打算用<code>maven</code>的话，你需要删除已经通过<code>maven</code>方式导入的包，然后重新导入。</p>

<p>然后我们就可以修改之前的布局文件，大致就是将其包含在<code>DrawerLayout</code>（v4包新增的布局）中，接着添加一个<code>ListView</code>用来显示导航列表。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;android.support.v4.widget.DrawerLayout
</span><span class='line'>    xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    xmlns:tools="http://schemas.android.com/tools"
</span><span class='line'>    android:id="@+id/drawer_layout"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    tools:context=".MainActivity" &gt;
</span><span class='line'> 
</span><span class='line'>    &lt;FrameLayout
</span><span class='line'>        android:id="@+id/main"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="match_parent" &gt;
</span><span class='line'>    &lt;/FrameLayout&gt;
</span><span class='line'> 
</span><span class='line'>    &lt;ListView
</span><span class='line'>        android:id="@+id/drawer"
</span><span class='line'>        android:layout_width="240dp"
</span><span class='line'>        android:layout_height="match_parent"
</span><span class='line'>        android:layout_gravity="start"
</span><span class='line'>        android:background="#FFF"
</span><span class='line'>        android:choiceMode="singleChoice" /&gt;
</span><span class='line'> 
</span><span class='line'>&lt;/android.support.v4.widget.DrawerLayout&gt;      </span></code></pre></td></tr></table></div></figure>


<p>      <br/>
接下来我们需要改变<code>MainActivity</code>中的代码来把<code>Adapter</code>给到<code>ListView</code>，之前我们是把<code>Adapter</code>给到<code>Spinner</code>的。代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected void onCreate(Bundle savedInstanceState)
</span><span class='line'>{
</span><span class='line'>    super.onCreate(savedInstanceState);
</span><span class='line'>    setContentView(R.layout.activity_main);
</span><span class='line'>    final String[] names = 
</span><span class='line'>        getResources().getStringArray(R.array.nav_names);
</span><span class='line'>    final String[] classes = 
</span><span class='line'>        getResources().getStringArray(R.array.nav_classes);
</span><span class='line'>    ArrayAdapter&lt;String&gt; adapter = 
</span><span class='line'>        new ArrayAdapter&lt;String&gt;(
</span><span class='line'>            getActionBar().getThemedContext(), 
</span><span class='line'>            android.R.layout.simple_list_item_1, names);
</span><span class='line'> 
</span><span class='line'>    final DrawerLayout drawer = 
</span><span class='line'>        (DrawerLayout)findViewById(R.id.drawer_layout);
</span><span class='line'>    final ListView navList = 
</span><span class='line'>        (ListView) findViewById(R.id.drawer);
</span><span class='line'>    navList.setAdapter(adapter);
</span><span class='line'>    navList.setOnItemClickListener(new OnItemClickListener()
</span><span class='line'>    {
</span><span class='line'> 
</span><span class='line'>        @Override
</span><span class='line'>        public void onItemClick(AdapterView&lt;?&gt; parent, 
</span><span class='line'>                View view, final int pos, long id)
</span><span class='line'>        {
</span><span class='line'>            drawer.setDrawerListener( 
</span><span class='line'>                new DrawerLayout.SimpleDrawerListener()
</span><span class='line'>            {
</span><span class='line'>                @Override
</span><span class='line'>                public void onDrawerClosed(View drawerView)
</span><span class='line'>                {
</span><span class='line'>                    super.onDrawerClosed(drawerView);
</span><span class='line'>                    FragmentTransaction tx = 
</span><span class='line'>                        getSupportFragmentManager()
</span><span class='line'>                            .beginTransaction();
</span><span class='line'>                    tx.replace(R.id.main, 
</span><span class='line'>                        Fragment.instantiate(
</span><span class='line'>                            MainActivity.this, 
</span><span class='line'>                            classes[pos]));
</span><span class='line'>                    tx.commit();
</span><span class='line'>                }
</span><span class='line'>            });
</span><span class='line'>            drawer.closeDrawer(navList);
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'> 
</span><span class='line'>    FragmentTransaction tx = 
</span><span class='line'>        getSupportFragmentManager().beginTransaction();
</span><span class='line'>    tx.replace(R.id.main,
</span><span class='line'>        Fragment.instantiate(MainActivity.this, classes[0]));
</span><span class='line'>    tx.commit();
</span><span class='line'>    }   
</span></code></pre></td></tr></table></div></figure>


<p>下面我们来分析一下上面的代码： <br/>
首先，我们需要一个不同的布局文件，因为<code>ListView</code>中的布局和之前<code>Spinner</code>中的不尽相同。接下来通过<code>findViewById</code>方法分别找到<code>DrawerLayout</code>和<code>ListView</code>，然后为<code>ListView</code>设置适配器。</p>

<hr />

<p>然后就需要处理一下<code>ListView</code>的点击事件——当<code>ListView</code>中某项被点击的时候，我们先关闭<code>drawer</code>，关闭完成后，我们再将<code>Fragment</code>呈现出来。</p>

<hr />

<p>我们之所以先把<code>drawer</code>关闭然后再加载<code>Fragment</code>是因为如果关闭<code>drawer</code>和加载<code>Fragment</code>同时进行的话，可能会有卡顿现象出现。当然，你也可以选择先加载<code>Fragment</code>然后再关闭<code>drawer</code>，但在本例中为了简单起见，我们选择先关闭<code>drawer</code>。</p>

<hr />

<p>最后，我们还需要设置默认的<code>Fragment</code>。之前我们用<code>Spinner</code>的时候，<code>Spinner</code>的默认选项使得我们可以通过<code>OnNavigationListener</code>来创建相应的<code>Fragment</code>。同样的，当我们用今天这个新的导航方式的时候，我们也必须手动设置一个默认的<code>Fragment</code>显示。</p>

<hr />

<p>完成上面这些操作，就可以得到一个简单的<code>Navigation Drawer</code>了。当我们从屏幕左侧边缘滑动的时候，侧面导航栏就会出现。</p>

<p><img src="http://blog.stylingandroid.com/wp-content/uploads/2013/05/simple.png" alt="Navigation Drawer" /></p>

<p>下一篇文章中，我们会讲一下<code>Navigation Drawer</code>如何与<code>ActionBar</code>整合起来，通过<code>ActionBar</code>来控制<code>Navigation Drawer</code>的显示和隐藏之间的切换。<br/>
本文中用到源码可以到<a href="https://bitbucket.org/StylingAndroid/adapters/src/03263bae4437e5e26c5d433bbfacb3ffd429a1cd/?at=NavigationDrawerPart1">这里</a>下载。</p>

<hr />

<p><a href="http://blog.stylingandroid.com/archives/1793">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Android中的回调（2）]]></title>
    <link href="http://koruk.github.io/blog/2013/05/08/android-callback-2/"/>
    <updated>2013-05-08T10:26:11+08:00</updated>
    <id>http://koruk.github.io/blog/2013/05/08/android-callback-2</id>
    <content type="html"><![CDATA[<h3>昨天谈了回调在Android中的使用，今天继续昨天的话题，说说什么时候应该该用回调以及回调在架构设计中的作用。</h3>

<h3>说之前先自己回顾一下Button的回调是什么时候执行的。</h3>

<h3>首先我们必须先清楚的一点是：</h3>

<blockquote><p>控件都有自己不同的状态，这点从selector的定义中也可以看的出来。比如什么state_focused 、state_pressed 、state_selected等等各种状态。</p></blockquote>

<h3>在用户点击按钮的时候其实本质上就是Button的状态改变——从normal到pressed再到normal。如果是复选框的话就是从normal到checked。</h3>

<h3>Button的回调方法onClick的执行其实就是在响应Button的状态变化。说到这里，如果你用心想的话应该明白了：</h3>

<blockquote><p> 回调其实就是响应某种状态变化，有状态变化的地方回调就有存在的必要。</p></blockquote>

<h3>另外，因为Button的点击状态变化比较单一，就是用户点击了一下，所以只需要一个onClick方法。而有些控件状态变化就不是那么单一，这时候就需要不止一个回调方法了。不知你用过ViewPager没有，它算是其中之一，如果你用过这个控件你会发现它当然也有回调接口，而且回调接口中的回调方法不是一个，而是三个。也许多数时候，你只是需要其中一个，但ViewPager的状态变化不止一个， Google在设计这个框架的时候当然要考虑所有可能的状态变化，这样不同的需求就可以去实现不同的方法。</h3>

<h3>另外，需要指出的是这里的状态变化，其实不止适用于控件，应用中所有的状态变化都可以定义回调接口来处理。只不过控件的状态变化更明显一些就是了。</h3>

<h3>回调在架构设计中是非常重要的一个概念，因为它可以让你架构师未雨绸缪，为将来可能发生的一切做好准备。</h3>

<hr />

<h3>给回调打个不恰当的比喻</h3>

<blockquote><p> 你可以把回调想象成一个妹子给你的绿色通道。妹子跟你说你通过这个通道进来，就能在通道的另一端找到我，咱们可以共同完成一件事（什么事大家猜）。但必须是这个通道，如果其他通道， 另一端等你的就是凤姐或者是个无底洞了。</p></blockquote>

<h3>分析一下上面的几个概念：</h3>

<ul>
<li>你是App</li>
<li>妹子是框架</li>
<li>绿色通道是一种接口</li>
<li>完成的那件事不是你想的那样啦，是响应控件或其他状态变化。</li>
</ul>


<h3>好吧，今天就先说这么多。如果你觉得咱们这个微信号对你有所帮助，麻烦大家多多给宣传宣传… :&ndash;)  这样我才有更大动力写出更好的文章。另外，如果大家开发过程中有了自己的小感悟，我也可以帮忙发一下。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Android中的回调（1）]]></title>
    <link href="http://koruk.github.io/blog/2013/05/07/callback-in-+android/"/>
    <updated>2013-05-07T15:26:11+08:00</updated>
    <id>http://koruk.github.io/blog/2013/05/07/callback-in- android</id>
    <content type="html"><![CDATA[<h3>对于刚刚接触Android开发的同学来说，也许第一个要面对的东西可能就是回调了。你可能会说：哪有，我第一个面对的是各种控件。是的，没错。但学控件最重要的就是回调——还记得你当时第一次写setOnClickListener的感觉么？当时是不是以为这就是固定写法，不知道其中的缘由。</h3>

<hr />

<h3>其实这个方法就是为控件设置回调实现，你传入的接口实现就是当Button被点击的时候，Button控件要执行的操作。因为点击Button后，需要什么操作是Android框架所不知道的，所以框架需要提前将接口准备好，需要我们来实现，因为我们是清楚点击Button的目的的是什么的。我们实现后将其通过setOnClickListener——框架预先为我们提供的一种把我们的具体的需求告诉控件的方式——传递给控件类。然后控件在检测到用户一定的操作（如果点击、双击等等）后直接回调我们实现的方法。</h3>

<hr />

<h3>通过上面的分析，你也许已经意识到了回调方法的特点——由系统调用的，而不是你去调用，你的任务是实现。实现和调用可不是一回事。</h3>

<h3>回调还有什么特点？想想Button是如何调用onClick回调方法的，是当用户点击Button了之后。所以也可以看出回调方法的执行时机是不确定的，当需要时调用。所以它也不会阻塞UI线程，不像网络操作之类。</h3>

<hr />

<h3>Android中还有哪些地方用到了回调——Hander，也是一个典型。你去实现Handler的Callback接口，然后传给Handler，Handler就可以安装你所希望的方式去处理消息了。它与Button的回调不同的是一个通过set方法传入，一个通过构造方法传入。</h3>

<hr />

<h3>以上算是比较容易理解的回调，还有一种回调，它的回调方法有多个而且互相关联。你问我说的哪个？——LoaderManager类有一个方法initLoader，这个方法的其中一个参数是接口类型的。你需要去实现这个接口，然后通过initLoader方法传入，然后initLoader方法内部几乎所有操作全部是由传入的接口实现来执行。包括用哪个加载器、加载完了做哪些操作、加载出错又如何？全部都在接口实现里面。</h3>

<hr />

<h3>面向对象有一种说法是少用继承多用组合。上面所说这些回调就是很好的例子——组合。想想如果你不用组合而用继承的方式会发生什么呢？</h3>

<hr />

<h3>每个按钮你都得写一个Button类的子类来实现特定功能。想想这是多么恐怖的事情。</h3>

<hr />

<h3>最后以高焕堂老师说过的一句经典的解释回调本质的话结束（当时高老师用这句话解释的BroadcastReceiver貌似，不过无所谓了，都是回调）：</h3>

<blockquote><p> &ldquo;Don&rsquo;t call me,I&rsquo;ll call you back.&rdquo;
 =</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ViewPager性能的讨论]]></title>
    <link href="http://koruk.github.io/blog/2013/05/06/viewpager-optimization/"/>
    <updated>2013-05-06T10:05:11+08:00</updated>
    <id>http://koruk.github.io/blog/2013/05/06/viewpager-optimization</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://weibo.com/wzsddtc" title="@王中晟edison">@王中晟edison</a>
发现一个小trick&hellip;<code>ViewPager</code>的<code>setOffScreeLimit</code>, 如果小的话页面内使用<code>requestLayout</code>的<code>Animation</code>就会很快，如果大的话页面之间的<code>Animation</code>就会快，所以如果我们根据动画的需要动态改变这个数字的话就会最大程度的优化整个App的动画！ <a href="http://weibo.com/n/KorukH" title="@KorukH">@KorukH</a> <a href="http://weibo.com/n/developerWorks" title="@developerWorks">@developerWorks</a></p>

<blockquote><p>KorukH：这个方法应该是设置系统为你缓存页面（<code>page</code>）的，缓存的页面不会重新<code>recreate</code>，所以速度会更快，在重写<code>ViewPager</code>的时候用的比较多。 <a href="http://t.cn/zTYYJSP">http://t.cn/zTYYJSP</a></p>

<blockquote><p>王中晟edison：是的，但是大家没有想到的是反过来使用这个属性来优化页面里面的动画。因为页面同时在缓存得越多，<code>requestLayout()</code>就会慢。</p>

<blockquote><p>KorukH: 这个倒不知道，有没有文章介绍？缓存会影响<code>requestLayout</code>… 官方文档好像没提到这方面</p>

<blockquote><p>王中晟edison：Romain Guy在这里有说过。因为所有Fragment的Views都会在<code>ViewPager</code>里面，所以如果你缓存了以后<code>requestLayout</code>会在所有的页面上都call.你页面里面的<code>requestLayout</code>就会出现。</p>

<hr />

<p>我是那天在把一个<code>TabActivity</code>转换成<code>FragmentActivity</code>时，发现里面的一个<code>Animation</code>突然变得很慢了发现的，如果只在有<code>requestLayout</code>()的<code>Animation</code>的那个页面将缓存变低（<code>onPageScrollState</code>是Idle时），而在其他页面将缓存变高，就可以在大部分地方都Smooth了。</p>

<hr />

<p>Romain Guy&rsquo;s StackOverflow Answer: <a href="http://t.cn/zTYT6pr">http://t.cn/zTYT6pr</a></p>

<hr />

<blockquote><p>KorukH：回复@王中晟edison:我不敢说听明白了… “只在有requestLayout()的Animation的那个页面将缓存变低”这句什么意思？idle状态的时候ViewPager就停止滚动了吧，还是说有动画的那个页面不可见时将缓存调高，可见时调低？</p>

<blockquote><p>王中晟edison：回复@KorukH: 假设这么个情形：你有4个Tabs, Tab#4有用requestLayout的动画。如果你把setOffScreenPageLimit(4)的话，4个Tabs之间的移动会非常圆滑。但是Tab #4上面的动画会很慢。如果你把setOffScreenPageLimit(1)得话，4个页面之间的移动会很卡，但是Tab#4上面的就很顺畅了。</p>

<hr />

<p>王中晟edison：回复@KorukH: 所以如果你在你的onPageChangedListener上通过知道用户在哪个界面来改变的话，就最好了。也就是说，用户到Tab #4的时候我们setOffScreenPageLimit(1)，但是其他任何页面上都setOffScreenPageLimit(4),这样页面1->2->3->4之间的滑动还是顺畅的，只有3&lt;-4之间的会卡一点，#4上面的页会顺畅</p>

<hr />

<p>王中晟edison：哦，当然，最好是在onPageScrolledChanged Idle得时候，不然可能会在滑动时有意想不到的NPE.</p>

<hr />

<blockquote><p>KorukH：回复@王中晟edison:是不是有点太hack的感觉了。不能像Romain Guy说的用其他方法？另外idle的时候界面上显示的就是滑动结束只有一个page吧，不是说用户正在滑动中？</p>

<blockquote><p>王中晟edison(纽约工程师):回复@KorukH: 话说Romain Guy..我的搭档去年在Google I/O见过他，说他很臭屁和牛逼，所以我们想问核心团队问题现在一般都是通过Android Developer Advocate的那帮人，他们很好心，有什么难解的问题都可以问他们，他们解决问题的效率有时候要比在stackoverflow上高，特别是device特别的问题，他们都遇过</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>

<p><a href="http://weibo.com/billytsui%C6%92%C6%92">崔海斌DX</a>
应该说的是<code>setOffscreenPageLimit</code>吧，此语句主要是用来设置当前页面左右的页面限制的，超出此范围的<code>Fragment</code>会被杀掉，因此，当此限制增加的时候，<code>Fragment</code>会被更多创建出来并且保持不被杀掉，因此当滑动时因为已经创建了，动画就更加流畅。但当有大量复杂页面存在时，会耗费大量资源，因此使用要小心</p></blockquote>

<pre><code>2013年5月6日 下午1:20
</code></pre>
]]></content>
  </entry>
  
</feed>
